// Task#01a Checking a palindrome with loop
const isPalindrome = (str) => {
  // Remove spaces and convert to lowercase
  str = str.replace(/\s/g, '').toLowerCase();
  // Iterate through the string and check if the characters match
  for (let i = 0; i < str.length / 2; i++) {
    if (str[i] !== str[str.length - 1 - i]) {
      return false; // If characters don't match, it's not a palindrome
    }
  }
  return true; // If all characters match, it's a palindrome
}
// Example usage
const inputString = prompt("Enter a String to check Palindrome or not? ");
if (isPalindrome(inputString)) {
  console.log(inputString + " is a palindrome.");
} else {
  console.log(inputString + " is not a palindrome.");
}








// Task#01-b Checking a palindrome without loop
const isPalindrome1 = (str) => {
  // Remove spaces and convert to lowercase
  str = str.replace(/\s/g, '').toLowerCase();
  // Check if the reversed string is the same as the original string
  const reversedStr = str.split('').reverse().join('');
  return str === reversedStr;
}
// Example usage
const inputString1 = prompt(`\n Enter a String to check the palindrome or not? `);
if (isPalindrome1(inputString1)) {
  console.log(inputString1 + " is a palindrome.");
} else {
  console.log(inputString1 + " is not a palindrome.");
}










//Task#02-a Check a prime number code
const isPrime = (number) => {
  // Base cases: 0 and 1 are not prime
  if (number <= 1) {
    return false;
  }
  // Loop from 2 to the square root of the number
  // If any divisor is found, the number is not prime
  for (let i = 2; i <= Math.sqrt(number); i++) {
    if (number % i === 0) {
      return false;
    }
  }
  // If no divisors are found, the number is prime
  return true;
}
const check = (no) => {
     no = parseInt(prompt("Enter a number to check prime or not? "));
    console.log(isPrime(no));
}
check();








//Task#02-b Series of Prime Number Code
function generatePrimes(limit) {
  const primes = [];
  for (let number = 2; number <= limit; number++) {
    let isPrime = true;
    for (let i = 2; i <= Math.sqrt(number); i++) {
      if (number % i === 0) {
        isPrime = false;
        break;
      }
    }
    if (isPrime) {
      primes.push(number);
    }
  }
  return primes;
}
const limit = prompt("Enter a limit to show a series of prime number: "); // Set the upper limit for generating primes
const primes = generatePrimes(limit);
console.log(primes); // [2, 3, 5, 7, 11, 13, 17, 19, .....]








//Task#03-a Factorial with Recursion
const factorial = (n) => {
  if (n === 0) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}
const num = parseInt(prompt("Enter a number to find the factorial: ")); // Number for which to find factorial
const result = factorial(num);
console.log(`The factorial of ${num} is: ${result}`); // The factorial of 5 is: 120

//Task#03-b Factorial without Recursion
const factorial1 = (no) => {
  let result1 = 1;
  for (let i = 1; i <= no; i++) {
    result1 *= i;
  }
  return result1;
}

let num1 = parseInt(prompt("Enter a Number to check the factorial: ")); // Number for which to find factorial
const result1 = factorial(num1);
console.log(`The factorial of ${num1} is: ${result1}`); // The factorial of 5 is: 120








//task#04-a Fibonacci Series without recursion
function fibonacciSeries(limit) {
  let series = [0, 1]; // Initialize the series with first two Fibonacci numbers

  while (series.length < limit) {
    const nextNumber = series[series.length - 1] + series[series.length - 2];
    series.push(nextNumber);
  }

  return series;
}

const limit = 10; // Set the limit for Fibonacci series
const series = fibonacciSeries(limit);
console.log(series); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]








//Task#04-b Fibonacci Seruies with Recursion
function fibonacciSeries(limit) {
  if (limit === 0) {
    return [];
  } else if (limit === 1) {
    return [0, 1];
  } else {
    const series = fibonacciSeries(limit - 1);
    series.push(series[series.length - 1] + series[series.length - 2]);
    return series;
  }
}

const limit = 10; // Set the limit for Fibonacci series
const series = fibonacciSeries(limit);
console.log(series); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]




//Task#05 Calculator with Validation on number and operators.

//HTML CODE
<!DOCTYPE html>
<html>
<head>
  <title>Calculator</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="cal.css">
</head>
<body>
  <div class="container mt-5">
    <h1>Calculator</h1>
    <form onsubmit="return calculate()">
      <div class="form-group">
        <input type="number" id="number1" class="form-control" placeholder="Enter number 1">
      </div>
      <div class="form-group">
        <input type="number" id="number2" class="form-control" placeholder="Enter number 2">
      </div>
      <div class="form-group">
        <select id="operator" class="form-control">
          <option value="">Select operator</option>
          <option value="+">Addition (+)</option>
          <option value="-">Subtraction (-)</option>
          <option value="*">Multiplication (*)</option>
          <option value="/">Division (/)</option>
        </select>
      </div>
      <button type="submit" class="btn btn-primary">Calculate</button>
    </form>
    <h4 class="mt-4">Result: <span id="result"></span></h4>
  </div>
  <script src="cal.js"></script>
</body>
</html>

//CSS CODE
  h1 {
    text-align: center;
  }
  form {
    max-width: 300px;
    margin: 0 auto;
  }
  button {
    width: 100%;
  }
  h4 {
    text-align: center;
    margin-top: 20px;
  }

//JS CODE
function calculate() {
    // Get input values
    const number1 = document.getElementById('number1').value;
    const number2 = document.getElementById('number2').value;
    const operator = document.getElementById('operator').value;
    
    // Validate input values
    if (!number1 || !number2 || !operator) {
      alert('Please enter valid values for number 1, number 2, and operator.');
      return false;
    }
    
    // Parse input values to numbers
    const num1 = parseFloat(number1);
    const num2 = parseFloat(number2);
    
    // Perform calculation based on operator
    let result;
    switch (operator) {
      case '+':
        result = num1 + num2;
        break;
      case '-':
        result = num1 - num2;
        break;
      case '*':
        result = num1 * num2;
        break;
      case '/':
        result = num1 / num2;
        break;
      default:
        alert('Please select a valid operator.');
        return false;
    }
    
    // Display result
    document.getElementById('result').textContent = result;
    
    // Prevent form submission
    return false;
  }
  


  // Create an array of numbers from 1 to 10
const numbers = Array.from({length: 10}, (_, i) => i + 1);


// Task #01: Filter out odd numbers
const oddNumbers = numbers.filter(number => number % 2 !== 0);

// Task #02: Square all odd numbers
const squaredOddNumbers = oddNumbers.map(number => number * number);

// Task #03: Sum of all squared odd numbers
const sumOfSquaredOddNumbers = squaredOddNumbers.reduce((acc, number) => acc + number, 0);

// Task #04: Find only even numbers from 1 to 8
const evenNumbers = numbers.slice(0, 8).filter(number => number % 2 === 0);

// Task #05: Find and remove all even numbers
for (let i = 0; i < numbers.length; i++) {
  if (numbers[i] % 2 === 0) {
    numbers.splice(i, 1);
    i--; // Adjust index after removing an element
  }
}

console.log("Original numbers: ", numbers);
console.log("Odd numbers: ", oddNumbers);
console.log("Squared odd numbers: ", squaredOddNumbers);
console.log("Sum of squared odd numbers: ", sumOfSquaredOddNumbers);
console.log("Even numbers (01 to 08): ", evenNumbers);
